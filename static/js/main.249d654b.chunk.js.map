{"version":3,"sources":["serviceWorker.js","reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["Boolean","window","location","hostname","match","initialSearchState","searchField","initialRobotsState","robots","isPending","error","Card","name","email","id","className","src","alt","CardList","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","this","setState","children","React","Component","App","onRetrieveRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","retrieveRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","rootReducer","combineReducers","action","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.249d654b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  RETRIEVE_ROBOTS_PENDING,\r\n  RETRIEVE_ROBOTS_SUCCESS,\r\n  RETRIEVE_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialSearchState = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialSearchState, action={}) => {\r\n  switch(action.type) {\r\n    case CHANGE_SEARCH_FIELD: \r\n      return {...state, searchField: action.payload};\r\n    default :\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialRobotsState = {\r\n  robots: [],\r\n  isPending: false,\r\n  error: ''\r\n}\r\n\r\nexport const retrieveRobots = (state=initialRobotsState, action={}) => {\r\n  switch(action.type) {\r\n    case RETRIEVE_ROBOTS_PENDING: \r\n      return {...state, isPending: true};\r\n    case RETRIEVE_ROBOTS_SUCCESS: \r\n      return {...state, isPending: false, robots: action.payload};\r\n    case RETRIEVE_ROBOTS_FAILED: \r\n      return {...state, error: action.payload, isPending: false};\r\n    default :\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        robots.map((robot) => {\r\n            return (\r\n                <Card key={robot.id} name={robot.name} id={robot.id} email={robot.email}/>\r\n            );\r\n        })\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type='search' \r\n            placeholder='search robots' \r\n            onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n    componentDidCatch() {\r\n        this.setState({hasError: true})\r\n    }\r\n    render() {\r\n        if(this.state.hasError) {\r\n            return <h1>Oops</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, retrieveRobots } from '../actions';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return  { \r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.retrieveRobots.robots,\r\n        error: state.retrieveRobots.error,\r\n        isPending: state.retrieveRobots.isPending,\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRetrieveRobots: () => dispatch(retrieveRobots())\r\n    };\r\n}\r\nclass App extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.onRetrieveRobots();\r\n    }\r\n    render() {\r\n        const { robots, isPending } = this.props;\r\n        const { searchField, onSearchChange } = this.props;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        return !isPending ? (\r\n            <div className=\"tc\">\r\n            <h1 className=\"f1\">Robots</h1>\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <ErrorBoundary>\r\n                <CardList robots={filteredRobots}/>\r\n            </ErrorBoundary>\r\n            </div>\r\n        ) : <h1 className=\"tc f1\">LOADING</h1>;\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  RETRIEVE_ROBOTS_PENDING,\r\n  RETRIEVE_ROBOTS_SUCCESS,\r\n  RETRIEVE_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n  payload: text,\r\n  type: CHANGE_SEARCH_FIELD\r\n});\r\n\r\nexport const retrieveRobots = () => (dispatch) => {\r\n  dispatch({ type: RETRIEVE_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(data => dispatch({ type: RETRIEVE_ROBOTS_SUCCESS, payload: data }))\r\n  .catch(error => dispatch({ type: RETRIEVE_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const RETRIEVE_ROBOTS_PENDING = 'RETRIEVE_ROBOTS_PENDING';\r\nexport const RETRIEVE_ROBOTS_SUCCESS = 'RETRIEVE_ROBOTS_SUCCESS';\r\nexport const RETRIEVE_ROBOTS_FAILED = 'RETRIEVE_ROBOTS_FAILED';","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport { searchRobots, retrieveRobots } from './reducers';\r\nimport App from './containers/App'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport ThunkMiddleware from 'redux-thunk';\r\nconst rootReducer = combineReducers({searchRobots, retrieveRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware));\r\n\r\nReactDOM.render(  \r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}